{"version":3,"sources":["service/firebase.ts","service/api.ts","service/UserService.ts","context/AuthContext.tsx","assets/logo_med_one.jpeg","components/Template.tsx","service/SendService.ts","context/UserContext.tsx","service/CourseService.ts","pages/User/UserForm.tsx","pages/User/UserList.tsx","pages/User/User.tsx","context/CourseContext.tsx","pages/Course/CourseForm.tsx","pages/Course/CourseList.tsx","pages/Course/Course.tsx","service/QuestionService.ts","context/QuestionContext.tsx","service/TopicService.ts","pages/Question/QuestionForm.tsx","pages/Question/QuestionList.tsx","pages/Question/Question.tsx","pages/Home/Home.tsx","pages/Internal.tsx","assets/logo_med_one.png","pages/Login.tsx","pages/NotFound.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","api","axios","create","baseURL","interceptors","request","use","a","config","user","currentUser","getIdToken","idToken","headers","Authorization","UserService","get","data","id","post","put","delete","AuthContext","createContext","AuthContextProvider","props","toast","useRef","useState","setUser","useEffect","unsubscribe","onAuthStateChanged","uid","email","userService","getUserById","dbUser","profile","handleLogout","signOut","then","undefined","catch","error","Provider","value","handleLogin","setPersistence","Auth","Persistence","LOCAL","signInWithEmailAndPassword","password","result","enabled","code","message","current","show","severity","summary","detail","life","ref","position","children","Template","history","useHistory","useContext","start","alt","src","logo","height","className","adminMenu","label","icon","items","command","push","userMenu","model","SendService","UserContext","UserContextProvider","Array","userList","setUserList","userSelected","setUserSelected","loading","setLoading","getUserList","getAllData","handleDelete","handleSave","update","pass","createUserWithEmailAndPassword","save","sendWelcomeMessage","CourseService","UserForm","courseList","setCourseList","source","setSource","target","setTarget","profiles","passwordHeader","passwordFooter","style","lineHeight","useForm","defaultValues","name","control","errors","formState","handleSubmit","reset","setValue","courses_id","length","filter","x","includes","getFormErrorMessage","Object","keys","handleLocalDelete","htmlFor","classNames","rules","required","render","field","fieldState","autoFocus","invalid","pattern","disabled","onChange","e","options","optionLabel","optionValue","toggleMask","header","footer","promptLabel","weakLabel","mediumLabel","strongLabel","inputId","checked","itemTemplate","item","sourceHeader","targetHeader","event","onClick","coursesId","map","confirmDialog","accept","reject","UserList","paginatorLeft","type","paginatorRight","currentPageReportTemplate","dataKey","emptyMessage","onSelectionChange","paginator","paginatorTemplate","rows","rowsPerPageOptions","selection","selectionMode","headerStyle","width","body","rowData","User","strokeWidth","animationDuration","align","CourseContext","CourseContextProvider","courseSelected","setCourseSelected","getCourseList","courseService","CourseForm","topics","setTopics","onSubmit","Topic","setName","url","setUrl","topic","pdf_url","handleAddTopic","newTopics","idx","onBlur","removeTopic","CourseList","t","join","Course","QuestionService","QuestionContext","QuestionContextProvider","questionList","setQuestionList","questionSelected","setQuestionSelected","getQuestionList","questionService","proof","TopicService","QuestionForm","topicList","setTopicList","couseList","filteredTopicList","setFilteredTopicList","answer","course_id","justification","option1","option2","option3","option4","option5","question","simulated","theme","topic_id","utterance","getValues","toString","handleFilterTopicList","newArray","courseId","newValue","parseInt","cols","autoResize","separator","QuestionList","Question","Home","Internal","exact","path","component","Login","emailChangePass","setEmailChangePass","setPosition","displayResponsive","dialogFuncMap","onHide","logoImg","feedback","href","visible","breakpoints","sendPasswordResetEmail","placeholder","NotFound","PrivateRoute","Component","rest","matchProps","to","App","from","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b91b9e69.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\n\r\nexport { firebase, auth }","import axios from 'axios';\r\nimport { firebase } from './firebase';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_BACKEND\r\n})\r\n\r\n// Add a request interceptor\r\napi.interceptors.request.use(async function (config) {\r\n  const user = firebase.auth().currentUser;\r\n  if(user == null){\r\n    return config;\r\n  }\r\n  const idToken = await user.getIdToken(true);\r\n  config.headers.Authorization =  `Bearer ${idToken}`;\r\n  return config;\r\n});\r\n\r\nexport { api };","import { api } from './api';\r\n\r\ninterface IUser {\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    profile: string;\r\n    enabled: boolean;\r\n    courses_id: string[]\r\n}\r\n\r\nclass UserService {\r\n\r\n  async getAllData() : Promise<Array<IUser>> {\r\n    const { data } =  await api.get('/user');\r\n    return data;\r\n  }\r\n\r\n  async getUserById(id: string) {\r\n    const { data } =  await api.get(`/user/${id}`);\r\n    return data;\r\n  }\r\n\r\n  async save(data: { id: string; email: string; name: string; profile: string; enabled: boolean; password?: string | undefined; }) {\r\n    return await api.post('/user', data);\r\n  }\r\n\r\n  async update(data: { id: string; email: string; name: string; profile: string; enabled: boolean; password?: string | undefined; }) {\r\n    return await api.put('/user', data);\r\n  }\r\n\r\n  async delete(id: string) {\r\n    const { data } =  await api.delete(`/user/${id}`);\r\n    return data;\r\n  }\r\n    \r\n}\r\n\r\nexport { UserService }\r\n","import { ReactNode, createContext } from \"react\";\r\nimport { Toast } from 'primereact/toast';\r\nimport { useRef, MutableRefObject, useEffect, useState } from 'react';\r\n\r\nimport { firebase } from '../service/firebase';\r\nimport { UserService } from '../service/UserService'\r\n\r\ntype IAccess = {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ntype User = {\r\n  id: string;\r\n  email: string | null;\r\n  profile: string | null;\r\n}\r\n\r\ntype AuthContextType = {\r\n  user: User | undefined;\r\n  handleLogin: Function,\r\n  handleLogout: Function,\r\n  toast: MutableRefObject<Toast | null>\r\n}\r\n\r\ntype AuthContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const toast = useRef(null);\r\n  \r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [user, setUser] = useState<User>();\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  \r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(() => {\r\n    const unsubscribe = firebase.auth().onAuthStateChanged(async (user) => {\r\n      if (user) {\r\n        const { uid, email } = user\r\n        const userService  = new UserService();\r\n        const dbUser = await userService.getUserById(email || '');\r\n        setUser({\r\n          id: uid,\r\n          email: email,\r\n          profile: dbUser.profile\r\n        });\r\n      }\r\n\r\n    });\r\n    \r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, [])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const handleLogout = () => {\r\n    firebase.auth().signOut().then(() => {\r\n      // Sign-out successful.\r\n      setUser(undefined);\r\n    }).catch((error) => {\r\n      // An error happened.\r\n    });\r\n  }\r\n\r\n  const handleLogin = (data: IAccess) => {\r\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n    .then(() => {\r\n      // Existing and future Auth states are now persisted in the current\r\n      // session only. Closing the window would clear any existing state even\r\n      // if a user forgets to sign out.\r\n      // ...\r\n      // New sign-in will be persisted with session persistence.\r\n      firebase.auth().signInWithEmailAndPassword(data.email, data.password).then(async (result) => {\r\n        if (result.user) {\r\n          const userService  = new UserService();\r\n          const dbUser = await userService.getUserById(data.email);\r\n          if(dbUser.enabled) {\r\n            setUser({\r\n              id: result.user.uid,\r\n              email: result.user.email,\r\n              profile: dbUser.profile\r\n            });\r\n          } else {\r\n            handleLogout();\r\n          }\r\n         \r\n        }\r\n      }).catch((error) => {\r\n        // Handle Errors here.\r\n        var errorCode = error.code;\r\n        var errorMessage = error.message;\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Erro',detail:'Usuário ou senha inválido.',life: 3000});\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      // Handle Errors here.\r\n      var errorCode = error.code;\r\n      var errorMessage = error.message;\r\n      //TODO Improve the way to get error \r\n      // @ts-ignore: Unreachable code error\r\n      toast.current.show({severity:'error', summary: 'Erro',detail:'Usuário ou senha inválido.',life: 3000});\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={{\r\n      handleLogin,\r\n      handleLogout,\r\n      toast,\r\n      user\r\n    }}>\r\n      <Toast ref={toast} position=\"top-right\" />\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/logo_med_one.42925195.jpeg\";","import { Menubar } from 'primereact/menubar';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useContext, useEffect } from 'react';\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport logo from '../assets/logo_med_one.jpeg';\r\n\r\nimport '../style/template.scss';\r\n\r\ntype TemplateProps = {\r\n  children: JSX.Element;\r\n}\r\n\r\nfunction Template(props:TemplateProps) {\r\n  const history = useHistory();\r\n   /*\r\n  **Framework Variables\r\n  */\r\n  const { user, handleLogout } = useContext(AuthContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  \r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const start = <img alt=\"logo\" src={logo}  height=\"40\" className=\"p-mr-2\"></img>\r\n  const adminMenu = {\r\n    label: 'Configuração',\r\n    icon: 'pi pi-fw pi-cog',\r\n    items:[\r\n      {\r\n        label:'Usuários',\r\n        icon:'pi pi-fw pi-users',\r\n        command: ()=> history.push('/app/user')\r\n      },\r\n      {\r\n        label:'Questões',\r\n        icon:'pi pi-fw pi-comment',\r\n        command: ()=> history.push('/app/question')\r\n      },\r\n      {\r\n        label:'Cursos',\r\n        icon:'pi pi-fw pi-book',\r\n        command: ()=> history.push('/app/course')\r\n      }\r\n    ]\r\n  };\r\n\r\n  const userMenu = {\r\n    label: 'Estudo',\r\n    icon: 'pi pi-fw pi-bookmark',\r\n    items:[\r\n      {\r\n        label:'Material',\r\n        icon:'pi pi-fw pi-file-o',\r\n        command: () => handleLogout()\r\n      },\r\n      {\r\n        label:'Questionário',\r\n        icon:'pi pi-fw pi-list',\r\n        command: () => handleLogout()\r\n      },\r\n      {\r\n        label:'Simulado',\r\n        icon:'pi pi-fw pi-compass',\r\n        command: () => handleLogout()\r\n      }\r\n    ]\r\n  }\r\n\r\n  \r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const items = [];\r\n  if(user === undefined) {\r\n    history.push('/login');\r\n    \r\n  } else {\r\n    if(user.profile === 'admin'){\r\n      items.push(adminMenu);\r\n    } \r\n  }\r\n  items.push(userMenu);\r\n  items.push(\r\n    {\r\n      label: 'Sair',\r\n      icon: 'pi pi-fw pi-power-off',\r\n      command: () => handleLogout()\r\n    }\r\n  );\r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <Menubar \r\n            start={start}\r\n            model={items}\r\n          />\r\n        </div>\r\n        <div className=\"body\">\r\n          { props.children }\r\n        </div>\r\n      </div>\r\n    </>\r\n  ) \r\n}\r\n\r\nexport { Template } ","import { api } from './api';\r\n\r\nclass SendService {\r\n\r\n  async sendWelcomeMessage(email:string, password: string) {\r\n    await api.post('/send/welcome/email',{email, password});\r\n  }\r\n\r\n}\r\n\r\nexport { SendService }","import { ReactNode, createContext } from \"react\";\r\nimport { Toast } from 'primereact/toast';\r\nimport { useState, useEffect, useRef, Dispatch, SetStateAction } from \"react\";\r\n\r\nimport { auth } from '../service/firebase';\r\nimport { SendService } from \"../service/SendService\";\r\nimport { UserService } from \"../service/UserService\";\r\n\r\ntype IUser = {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  profile: string;\r\n  enabled: boolean;\r\n  password?: string;\r\n  courses_id: string[]\r\n}\r\n\r\ntype UserContextType = {\r\n  handleDelete: Function;\r\n  handleSave: Function;\r\n  loading: boolean;\r\n  setUserSelected : Dispatch<SetStateAction<IUser |  undefined>>;\r\n  userList: Array<IUser>;\r\n  userSelected: IUser |  undefined;\r\n}\r\n\r\ntype UserContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const UserContext = createContext({} as UserContextType);\r\n\r\nexport function UserContextProvider(props: UserContextProviderProps) {\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const toast = useRef(null);\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [userList, setUserList] = useState(Array<IUser>())\r\n  const [userSelected, setUserSelected] = useState<IUser>();\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const [loading, setLoading] = useState(false);\r\n   \r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const getUserList = () => {\r\n    const userService = new UserService();\r\n    userService.getAllData().then( result => {\r\n      setUserList(result);\r\n    });\r\n  }\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=>{\r\n    getUserList();\r\n  }, [])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const handleSave = (data: IUser) => {\r\n    setLoading(true);\r\n    const userService = new UserService();\r\n    if(userSelected && data.email === userSelected?.email){\r\n      data.id = userSelected.id;\r\n      userService.update(data).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Usuário atualizado com sucesso.',life: 3000});\r\n        getUserList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Erro',detail:'Problema ao atualizar o usuário.',life: 3000});\r\n        setLoading(false);\r\n      })\r\n    } else {\r\n      const pass = data.password || ''\r\n      auth.createUserWithEmailAndPassword(data.email, pass).then(() => {\r\n        userService.save(data).then(async () => {\r\n          const sendService = new SendService();\r\n          sendService.sendWelcomeMessage(data.email, pass);\r\n          //TODO Improve the way to get error \r\n          // @ts-ignore: Unreachable code error\r\n          toast.current.show({severity:'success', summary: 'Sucesso',detail:'Usuário salvo com sucesso.',life: 3000});\r\n          getUserList();\r\n          setLoading(false);\r\n        })\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao salvar o usuário.',life: 3000});\r\n        setLoading(false);\r\n      });       \r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setLoading(true);\r\n    const userService = new UserService();\r\n    if( userSelected ){\r\n      userService.delete(userSelected.id).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Usuário removido com sucesso.',life: 3000});\r\n        getUserList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao remover o usuário.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <UserContext.Provider value={{\r\n      handleDelete,\r\n      handleSave,\r\n      loading,\r\n      setUserSelected,\r\n      userList,\r\n      userSelected,\r\n    }}>\r\n      <Toast ref={toast} position=\"top-right\" />\r\n      {props.children}\r\n    </UserContext.Provider>\r\n  );\r\n}","import { api } from './api';\r\n\r\ninterface ITopic {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  couseId?: string;\r\n}\r\n\r\ninterface ICourse {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  topics: Array<ITopic>;\r\n}\r\n\r\nclass CourseService {\r\n\r\n  async save(data: ICourse) {\r\n    return await api.post('/course', data);\r\n  }\r\n\r\n  async update(data: ICourse) {\r\n    return await api.put('/course', data);\r\n  }\r\n    \r\n  async getAllData() : Promise<Array<ICourse>> {\r\n    const { data } =  await api.get('/course');\r\n    return data;\r\n  } \r\n\r\n  async delete(id: string) {\r\n    const { data } =  await api.delete(`/course/${id}`);\r\n    return data;\r\n  }  \r\n}\r\n\r\nexport { CourseService }\r\n","import { Button } from 'primereact/button';\r\nimport { Checkbox } from 'primereact/checkbox';\r\nimport { classNames } from 'primereact/utils';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { Divider } from 'primereact/divider';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport { CourseService } from '../../service/CourseService';\r\nimport { useEffect, useContext, useState} from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { PickList, PickListChangeParams } from 'primereact/picklist';\r\n\r\nimport { UserContext } from '../../context/UserContext'\r\n\r\ninterface ICourse {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n}\r\n\r\ntype IUser = {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  password?: string;\r\n  profile: string;\r\n  enabled: boolean;\r\n  courses_id: string[]\r\n}\r\n\r\nexport function UserForm(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { userSelected, setUserSelected, handleSave, handleDelete } = useContext(UserContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [courseList, setCourseList] = useState(Array<ICourse>());\r\n  const [source, setSource] = useState(Array<ICourse>());\r\n  const [target, setTarget] = useState(Array<ICourse>());\r\n  const defaultValues = {\r\n    email: '',\r\n    name: '',\r\n    profile: '',\r\n    password: '',\r\n    enabled: true,\r\n  }\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const profiles = [\r\n    { \"name\": \"Administrador\", \"code\": \"admin\" },\r\n    { \"name\": \"Usuário\", \"code\": \"user\" }\r\n  ]\r\n\r\n  const passwordHeader = <h6>Informe uma senha</h6>;\r\n  const passwordFooter = (\r\n    <>\r\n      <Divider />\r\n      <p className=\"p-mt-2\">Sugestão</p>\r\n      <ul className=\"p-pl-2 p-ml-2 p-mt-0\" style={{ lineHeight: '1.5' }}>\r\n        <li>Letra minúscula</li>\r\n        <li>Letra maiúscula</li>\r\n        <li>Possuir números</li>\r\n        <li>Maior que 8 caracteres</li>\r\n      </ul>\r\n    </>\r\n  );\r\n\r\n  const { \r\n    control,\r\n    formState: { errors }, \r\n    handleSubmit,\r\n    reset,\r\n    setValue  \r\n  } = useForm({ defaultValues });\r\n  /*\r\n  **Get values from state\r\n  */\r\n  useEffect(() => {\r\n    if(userSelected){\r\n      setValue('email', userSelected.email);\r\n      setValue('name', userSelected.name);\r\n      setValue('profile', userSelected.profile);\r\n      setValue('enabled', userSelected.enabled);\r\n      if(userSelected.courses_id.length > 0){\r\n        setTarget(courseList.filter(x => userSelected.courses_id.includes(x.id)));\r\n        setSource(courseList.filter(x => !userSelected.courses_id.includes(x.id)));\r\n      }\r\n    }  \r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[userSelected])\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const getFormErrorMessage = (name: string) => {\r\n    if(Object.keys(errors).includes(name)){\r\n      return (\r\n        <small className=\"p-error\">\r\n          { \r\n            /** //TODO Improve the way to get error */\r\n            // @ts-ignore: Unreachable code error\r\n            errors[name].message \r\n          }\r\n        </small>\r\n      );\r\n    }\r\n  };\r\n\r\n  const getCourseList = () => {\r\n    const courseService = new CourseService();\r\n    courseService.getAllData().then( result => {\r\n      setCourseList(result);\r\n      setSource(result);\r\n    });\r\n  }\r\n\r\n\r\n  const confirm = () => {\r\n    confirmDialog({\r\n      message: 'Tem certeza que deseja remover?',\r\n      header: 'Confirmação',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      accept: () => handleLocalDelete(),\r\n      reject: () => null\r\n    });\r\n  }\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=>{\r\n    getCourseList();\r\n  }, [])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const onSubmit = (data: IUser) => {\r\n    const coursesId = target.map(x => x.id);\r\n    data.courses_id = coursesId;\r\n    handleSave(data);\r\n    setUserSelected(undefined);\r\n    setSource(courseList);\r\n    setTarget([]);\r\n    reset();\r\n  };\r\n\r\n  const handleLocalDelete = () => {\r\n    handleDelete();\r\n    setUserSelected(undefined);\r\n    reset();\r\n  }\r\n\r\n  const handleOnChange = (event: PickListChangeParams) => {\r\n    setSource(event.source);\r\n    setTarget(event.target);\r\n  }\r\n\r\n\r\n  const itemTemplate = (item: ICourse) => {\r\n    return (\r\n        <div className=\"product-item\">\r\n          <span>{item.name}</span>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  return(<>\r\n    <form  className=\"p-fluid\">\r\n      <div className=\"p-fluid p-formgrid p-grid\">\r\n        <div className=\"p-field p-col\">\r\n          <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Nome*</label>\r\n          <Controller \r\n            name=\"name\"\r\n            control={control}\r\n            rules={{ required: 'Nome é obrigatório.' }}\r\n            render={({ field, fieldState }) => (\r\n              <InputText\r\n                id={field.name}\r\n                {...field}\r\n                autoFocus\r\n                className={classNames({ 'p-invalid': fieldState.invalid })}\r\n              />\r\n            )} \r\n          />\r\n          {getFormErrorMessage('name')}\r\n        </div>\r\n        <div className=\"p-field p-col\">\r\n          <label htmlFor=\"email\" className={classNames({ 'p-error': !!errors.email })}>Email*</label>\r\n          <Controller \r\n            name=\"email\"\r\n            control={control}\r\n            rules={\r\n              { \r\n                required: 'Email é obrigatório.', \r\n                pattern: { \r\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                    message: 'Endereço de email inválido.  E.x. examplo@email.com'\r\n                }\r\n              }\r\n            }\r\n            render={({ field, fieldState }) => (\r\n              <InputText \r\n                id={field.name}\r\n                disabled={userSelected !== undefined}\r\n                {...field} \r\n                className={classNames({ 'p-invalid': fieldState.invalid })}\r\n              />\r\n          )} />\r\n          {getFormErrorMessage('email')}\r\n        </div>\r\n      </div>\r\n      <div className=\"p-fluid p-formgrid p-grid\"> \r\n        <div className=\"p-field p-col\">\r\n          <label htmlFor=\"profile\">Perfil</label>\r\n          <Controller \r\n            name=\"profile\"\r\n            control={control}\r\n            render={({ field }) => \r\n          (   \r\n            <Dropdown \r\n              id={field.name}\r\n              value={field.value}\r\n              onChange={(e) => field.onChange(e.value)}\r\n              options={profiles}\r\n              optionLabel=\"name\"\r\n              optionValue=\"code\" \r\n              name=\"profile\"\r\n            />\r\n          )} />\r\n        </div>\r\n        <div className=\"p-field p-col\">\r\n          {\r\n            userSelected ? <></> :(\r\n              <>\r\n                <label htmlFor=\"password\" className={classNames({ 'p-error': errors.password })}>Senha*</label>\r\n                <Controller \r\n                  name=\"password\"\r\n                  control={control}\r\n                  rules={{ required: 'Senha é obrigatório.' }}\r\n                  render={({ field, fieldState }) => (\r\n                    <Password \r\n                      id={field.name} \r\n                      {...field} \r\n                      toggleMask \r\n                      className={classNames({ 'p-invalid': fieldState.invalid })} \r\n                      header={passwordHeader}\r\n                      footer={passwordFooter}\r\n                      promptLabel=\"Entre com a senha\"\r\n                      weakLabel='Fraca'\r\n                      mediumLabel='Moderada'\r\n                      strongLabel='Forte'\r\n                    />\r\n                )} />\r\n                {getFormErrorMessage('password')}\r\n              </>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n      <div className=\"p-fluid p-formgrid p-grid\">\r\n        <div className=\"p-field p-col\">\r\n          <div className=\"p-field-checkbox\">\r\n            <Controller\r\n              name=\"enabled\"\r\n              control={control}\r\n              rules={{ required: true }}\r\n              render={({ field, fieldState }) => (\r\n                <Checkbox\r\n                  inputId={field.name}\r\n                  onChange={(e) => field.onChange(e.checked)}\r\n                  checked={field.value}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"enabled\" className={classNames({ 'p-error': errors.enabled })}>Habilitado*</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-field p-col\"></div>\r\n      </div>\r\n      <div className=\"p-fluid p-formgrid p-grid\">\r\n        <div className=\"p-field p-col\">\r\n          <label>Cursos</label>\r\n          <PickList\r\n            source={source}\r\n            target={target}\r\n            itemTemplate={itemTemplate}\r\n            sourceHeader=\"Disponíveis\"\r\n            targetHeader=\"Habilitados\"\r\n            onChange={handleOnChange}>  \r\n          </PickList>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <div className=\"p-fluid p-formgrid p-grid\">\r\n      <div className=\"p-field p-col\">\r\n        <Button \r\n          label=\"Salvar\"\r\n          icon=\"pi pi-check-circle\"\r\n          onClick={handleSubmit(onSubmit)}\r\n          className=\"p-button-rounded p-mr-2 p-mb-2\" \r\n        />\r\n      </div>\r\n      <div className=\"p-field p-col\">\r\n        <Button \r\n          label=\"Limpar\" \r\n          className=\"p-button-rounded p-mr-2 p-mb-2\"\r\n          icon=\"pi pi-times-circle\"\r\n          onClick={\r\n            () => {reset(); setUserSelected(undefined);}\r\n          } \r\n        />\r\n      </div>\r\n      <div className=\"p-field p-col\">\r\n        <Button\r\n          label=\"Remover\"\r\n          onClick={confirm}\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-rounded p-button-danger p-mb-2\" \r\n        />\r\n      </div>\r\n    </div>\r\n    </>)\r\n}","import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { useContext } from 'react' \r\n\r\nimport { UserContext } from '../../context/UserContext'\r\n\r\ntype IUser = {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  profile: string;\r\n  enabled: boolean;\r\n}\r\n\r\nexport function UserList(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { userList, userSelected, setUserSelected } = useContext(UserContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const profileBodyTemplate = (rowData: IUser) => {\r\n    if(rowData.profile === 'admin'){\r\n      return \"Administrador\";\r\n    }\r\n    return \"Usuário\";\r\n  }\r\n\r\n  const enabledBodyTemplate = (rowData: IUser) => {\r\n    if(rowData.enabled){\r\n      return \"Sim\";\r\n    }\r\n    return \"Não\";\r\n  }\r\n\r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  return(\r\n    <DataTable\r\n        currentPageReportTemplate=\"Exibindo {first} de {last} até {totalRecords}\" \r\n        dataKey=\"id\"\r\n        emptyMessage=\"Não foram encontrados usuários\"\r\n        onSelectionChange={e => setUserSelected(e.value)}\r\n        paginator\r\n        paginatorLeft={paginatorLeft}\r\n        paginatorRight={paginatorRight}\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n        rows={10} \r\n        rowsPerPageOptions={[10,20,30]}\r\n        selection={userSelected}\r\n        selectionMode=\"radiobutton\"\r\n        value={userList}\r\n    >\r\n      <Column selectionMode=\"single\" headerStyle={{width: '3em'}}></Column>\r\n      <Column field=\"email\" header=\"Email\"></Column>\r\n      <Column field=\"name\" header=\"Nome\"></Column>\r\n      <Column header=\"Perfil\" body={profileBodyTemplate}></Column>\r\n      <Column header=\"Habilitado\" body={enabledBodyTemplate}></Column>\r\n    </DataTable>    \r\n  );\r\n}","import { Divider } from 'primereact/divider';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { useContext } from \"react\";\r\n\r\nimport { UserContext, UserContextProvider } from '../../context/UserContext'\r\nimport { UserForm } from \"./UserForm\";\r\nimport { UserList } from \"./UserList\";\r\n\r\nexport function User(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { loading } = useContext(UserContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  \r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  \r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n\r\n  return (<UserContextProvider>\r\n    <div className=\"spinnerContainer\">\r\n      {\r\n        loading ? (<ProgressSpinner \r\n            style={{width: '30px', height: '30px'}}\r\n            strokeWidth=\"8\"\r\n            animationDuration=\"1s\"\r\n        />) : (<></>)\r\n      }\r\n    </div>\r\n    <Divider align=\"center\">\r\n      <span className=\"my-page-header\">Formulário do Usuário</span> \r\n    </Divider>\r\n    <div className=\"my-from\"> \r\n      <UserForm />\r\n    </div>\r\n    <Divider align=\"center\" >\r\n      <span className=\"my-page-header\">Lista de Usuário</span> \r\n    </Divider>\r\n    <div className=\"my-list\"> \r\n      <UserList />\r\n    </div>\r\n  </UserContextProvider>);\r\n}","import { CourseService } from '../service/CourseService';\r\nimport { \r\n  ReactNode,\r\n  createContext,\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  Dispatch,\r\n  SetStateAction\r\n} from \"react\";\r\nimport { Toast } from 'primereact/toast';\r\n\r\ninterface ITopic {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  couseId?: string;\r\n}\r\n\r\ninterface ICourse {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  topics: Array<ITopic>;\r\n}\r\n\r\ntype CourseContextype = {\r\n  courseList: Array<ICourse>\r\n  courseSelected: ICourse | undefined,\r\n  handleDelete: Function,\r\n  handleSave: Function,\r\n  loading: boolean,\r\n  setCourseSelected: Dispatch<SetStateAction<ICourse | undefined>>,\r\n}\r\n\r\ntype CourseContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const CourseContext = createContext({} as CourseContextype);\r\n\r\nexport function CourseContextProvider(props: CourseContextProviderProps) {\r\n    /*\r\n  **Framework Variables\r\n  */\r\n  const toast = useRef(null);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [courseList, setCourseList] = useState(Array<ICourse>());\r\n  const [courseSelected, setCourseSelected] = useState<ICourse>();\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const [loading, setLoading] = useState(false);\r\n \r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const getCourseList = () => {\r\n    const courseService = new CourseService();\r\n    courseService.getAllData().then( result => {\r\n      setCourseList(result);\r\n    });\r\n  }\r\n\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=>{\r\n    getCourseList();\r\n  }, [])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const handleSave = (data: ICourse) => {\r\n    setLoading(true);\r\n    const courseService = new CourseService();\r\n    if(courseSelected && data.name === courseSelected?.name){\r\n      data.id = courseSelected.id;\r\n      courseService.update(data).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Curso atualizado com sucesso.',life: 3000});\r\n        getCourseList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Erro',detail:'Problema ao atualizar o curso.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      courseService.save(data).then(async () => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Curso salvo com sucesso.',life: 3000});\r\n        getCourseList();\r\n        setLoading(false);                  \r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao salvar o curso.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setLoading(true);\r\n    const courseService = new CourseService();\r\n    if( courseSelected ){\r\n      courseService.delete(courseSelected.id).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Curso removido com sucesso.',life: 3000});\r\n        getCourseList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao remover o curso.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }\r\n  \r\n  \r\n  return (\r\n    <CourseContext.Provider value={{\r\n      courseList,\r\n      courseSelected,\r\n      handleDelete,\r\n      handleSave,\r\n      loading,\r\n      setCourseSelected\r\n    }}>\r\n      <Toast ref={toast} position=\"top-right\" />\r\n      {props.children}\r\n    </CourseContext.Provider>\r\n  );\r\n}","import { Button } from 'primereact/button';\r\nimport { Checkbox } from 'primereact/checkbox';\r\nimport { classNames } from 'primereact/utils';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { CourseContext } from '../../context/CourseContext';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useState, useEffect, useContext } from 'react';\r\n\r\ntype ITopic = {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  couseId?: string;\r\n}\r\n\r\ntype ICourse = {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  topics: Array<ITopic>;\r\n}\r\n\r\ntype TopicProps = {\r\n  topic: ITopic;\r\n  idx: number;\r\n}\r\n\r\nexport function CourseForm(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { courseSelected, setCourseSelected, handleSave, handleDelete } = useContext(CourseContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [ topics, setTopics ] = useState<Array<ITopic>>([]);\r\n  const defaultValues = {\r\n    name: '',\r\n    enabled: true\r\n  } \r\n  /*\r\n  **Local Variables\r\n  */\r\n  const { \r\n    control,\r\n    formState: { errors }, \r\n    handleSubmit,\r\n    reset,\r\n    setValue  \r\n  } = useForm({ defaultValues });\r\n  /*\r\n  **Get values from state\r\n  */\r\n  useEffect(() => {\r\n    if(courseSelected){\r\n      setValue('name', courseSelected.name);\r\n      setValue('enabled', courseSelected.enabled);\r\n      setTopics(courseSelected.topics);\r\n    }\r\n  }, [courseSelected])\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const getFormErrorMessage = (name: string) => {\r\n    if(Object.keys(errors).includes(name)){\r\n      return (\r\n        <small className=\"p-error\">\r\n          { \r\n            /** //TODO Improve the way to get error */\r\n            // @ts-ignore: Unreachable code error\r\n            errors[name].message \r\n          }\r\n        </small>\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  const confirm = () => {\r\n    confirmDialog({\r\n      message: 'Tem certeza que deseja remover?',\r\n      header: 'Confirmação',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      accept: () => handleLocalDelete(),\r\n      reject: () => null\r\n    });\r\n  }\r\n\r\n  const addNewTopic = () => {\r\n    const newTopics = [\r\n      ...topics, \r\n      {\r\n        id:'',\r\n        name: '',\r\n        pdf_url: ''\r\n      }\r\n    ];\r\n    setTopics(newTopics);\r\n  }\r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const onSubmit = (data: ICourse) => {\r\n    data.topics = topics;\r\n    handleSave(data)\r\n    setCourseSelected(undefined);\r\n    setTopics([]);\r\n    reset();\r\n  };\r\n\r\n  const handleClean = () => {\r\n    setCourseSelected(undefined);\r\n    setTopics([]);\r\n    reset();\r\n  }\r\n\r\n  const handleLocalDelete = () => {\r\n    handleDelete();\r\n    setTopics([]);\r\n    setCourseSelected(undefined);\r\n    reset();\r\n  }\r\n\r\n   /*\r\n  **Local Component\r\n  */\r\n  const Topic = (props:TopicProps) => {\r\n\r\n    const [ name, setName] = useState('');\r\n    const [ url, setUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n      if( props.topic !== undefined ){ \r\n        setName(props.topic.name);\r\n        setUrl(props.topic.pdf_url);\r\n      }\r\n    },[props.topic])\r\n\r\n    const handleAddTopic = () => {\r\n      let newTopics =  [...topics];\r\n      if(typeof topics[props.idx] === 'undefined') {\r\n        newTopics.push({id: '', name, \"pdf_url\": url});\r\n        setTopics(newTopics);\r\n      }\r\n      else {\r\n        newTopics[props.idx].name = name;\r\n        newTopics[props.idx].pdf_url = url;\r\n        setTopics(newTopics);\r\n      }\r\n    }\r\n\r\n    const removeTopic = () => {\r\n      let newTopics = [...topics];\r\n      delete newTopics[props.idx];\r\n      newTopics = newTopics.filter(item => item !== undefined)\r\n      setTopics(newTopics);\r\n    }\r\n\r\n    return(\r\n      <>\r\n        <div className=\"p-fluid p-formgrid p-grid\" key={`div_topic_${props.idx}`}>\r\n          <div className=\"p-field p-col\">\r\n              <label htmlFor=\"name\">Nome</label>\r\n              <InputText \r\n                name=\"name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                onBlur={() => handleAddTopic()}\r\n              />\r\n          </div>\r\n          <div className=\"p-field p-col\">\r\n              <label htmlFor=\"pdf\">URL Apostila</label>\r\n              <InputText \r\n                name=\"pdf\" \r\n                value={url}                              \r\n                onChange={(e) => setUrl(e.target.value)} \r\n                onBlur={() => handleAddTopic()} \r\n              />\r\n          </div>\r\n          <div className=\"p-field p-col my-icon\">\r\n            <Button\r\n              onClick={() => removeTopic()}\r\n              icon=\"pi pi-trash\"\r\n              className=\"p-button-rounded p-button-danger p-mb-2\" \r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return(<>\r\n    <form onSubmit={handleSubmit(onSubmit)} className=\"p-fluid\">\r\n      <div className=\"p-fluid p-formgrid p-grid\">\r\n        <div className=\"p-field p-col\">\r\n          <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Nome*</label>\r\n          <Controller \r\n            name=\"name\"\r\n            control={control}\r\n            rules={{ required: 'Nome é obrigatório.' }}\r\n            render={({ field, fieldState }) => (\r\n              <InputText\r\n                id={field.name}\r\n                {...field}\r\n                autoFocus\r\n                className={classNames({ 'p-invalid': fieldState.invalid })}\r\n              />\r\n            )} \r\n          />\r\n          {getFormErrorMessage('name')}\r\n        </div>\r\n        <div className=\"p-field p-col\">\r\n          <div className=\"p-field-checkbox\">\r\n            <Controller\r\n              name=\"enabled\"\r\n              control={control}\r\n              rules={{ required: false }}\r\n              render={({ field, fieldState }) => (\r\n                <Checkbox\r\n                  inputId={field.name}\r\n                  onChange={(e) => field.onChange(e.checked)}\r\n                  checked={field.value}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"enabled\" className={classNames({ 'p-error': errors.enabled })}>Habilitado</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <div className=\"p-fluid p-formgrid p-grid\">\r\n      <div className=\"p-field p-col\">\r\n        <Button \r\n          onClick={handleSubmit(onSubmit)}\r\n          label=\"Salvar\"\r\n          icon=\"pi pi-check-circle\"\r\n          className=\"p-button-rounded p-mr-2 p-mb-2\" \r\n        />\r\n      </div>\r\n      <div className=\"p-field p-col\">\r\n        <Button \r\n          label=\"Limpar\" \r\n          className=\"p-button-rounded p-mr-2 p-mb-2\"\r\n          icon=\"pi pi-times-circle\"\r\n          onClick={handleClean} \r\n        />\r\n      </div>\r\n      <div className=\"p-field p-col\">\r\n        <Button\r\n          label=\"Remover\"\r\n          onClick={confirm}\r\n          icon=\"pi pi-trash\"\r\n          className=\"p-button-rounded p-button-danger p-mb-2\" \r\n        />\r\n      </div>\r\n    </div>\r\n    <h5 className=\"p-text p-mb-4\">\r\n      Adicionar Tópicos\r\n      <Button\r\n        onClick={addNewTopic}\r\n        icon=\"pi pi-plus\"\r\n        className=\"p-button-rounded my-add-topic\"\r\n      />\r\n    </h5> \r\n    {\r\n      topics?.map((topic, idx) => \r\n      <>\r\n        <Topic\r\n          key={`topicos_${idx}`}\r\n          topic={topic}\r\n          idx={idx}\r\n        />\r\n      </>)\r\n    }\r\n  </>)\r\n}","import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { CourseContext } from '../../context/CourseContext';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { useContext } from 'react';\r\n\r\ninterface ITopic {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  couseId?: string;\r\n}\r\n\r\ninterface ICourse {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  topics: Array<ITopic>;\r\n}\r\n\r\nexport function CourseList(){\r\n  const { courseList, courseSelected, setCourseSelected } = useContext(CourseContext);\r\n\r\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n\r\n  const topicBodyTemplate = (rowData: ICourse) => {\r\n    return rowData.topics.map(t => t.name).join();\r\n  }\r\n\r\n  const enabledBodyTemplate = (rowData: ICourse) => {\r\n    if(rowData.enabled){\r\n      return \"Sim\";\r\n    }\r\n    return \"Não\";\r\n  }\r\n\r\n  return(<>\r\n      <DataTable\r\n        currentPageReportTemplate=\"Exibindo {first} de {last} até {totalRecords}\" \r\n        dataKey=\"id\"\r\n        emptyMessage=\"Nenhum curso foi encontrado.\"\r\n        onSelectionChange={e => setCourseSelected(e.value)}\r\n        paginator\r\n        paginatorLeft={paginatorLeft}\r\n        paginatorRight={paginatorRight}\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n        rows={10} \r\n        rowsPerPageOptions={[10,20,30]}\r\n        selection={courseSelected}\r\n        selectionMode=\"radiobutton\"\r\n        value={courseList}\r\n    >\r\n      <Column selectionMode=\"single\" headerStyle={{width: '3em'}}></Column>\r\n      <Column field=\"name\" header=\"Nome\"></Column>\r\n      <Column header=\"Tópico\" body={topicBodyTemplate}></Column>\r\n      <Column header=\"Habilitado\" body={enabledBodyTemplate}></Column>\r\n    </DataTable>\r\n  </>)\r\n}","import { CourseForm } from './CourseForm';\r\nimport { CourseList } from './CourseList';\r\nimport { Divider } from 'primereact/divider';\r\nimport { useContext } from 'react';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\n\r\nimport { CourseContextProvider, CourseContext } from '../../context/CourseContext'\r\n\r\nexport function Course(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { loading } = useContext(CourseContext);\r\n  /*\r\n  **Model Variables\r\n  */\r\n \r\n  /*\r\n  **Local Variables\r\n  */\r\n  \r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n \r\n\r\n  /*\r\n  **React Methods\r\n  */\r\n \r\n  /*\r\n  **Event Handler\r\n  */\r\n\r\n  return (\r\n    <CourseContextProvider>\r\n      <Divider align=\"center\">\r\n        <span className=\"my-page-header\">Formulário do Curso</span> \r\n      </Divider>\r\n     \r\n      <div className=\"spinnerContainer\">\r\n        {\r\n          loading ? (<ProgressSpinner \r\n            style={{width: '30px', height: '30px'}}\r\n            strokeWidth=\"8\"\r\n            animationDuration=\"1s\"\r\n          />) : (<></>)\r\n        }\r\n      </div>\r\n      <div className=\"my-from\"> \r\n        <CourseForm />\r\n      </div>\r\n      <Divider align=\"center\" >\r\n        <span className=\"my-page-header\">Lista de Curso</span> \r\n      </Divider>\r\n      <div className=\"my-list\"> \r\n        <CourseList />\r\n      </div>\r\n    </CourseContextProvider>\r\n  )\r\n}","import { api } from './api';\r\n\r\ntype IQuestion = {\r\n  answer: number;\r\n  course_id: string;\r\n  id: string;\r\n  justification: string;\r\n  options: Array<string>;\r\n  proof: string;\r\n  question: string;\r\n  simulated: boolean\r\n  theme: Array<string>;\r\n  topic_id: string;\r\n  utterance: string\r\n}\r\n\r\nclass QuestionService {\r\n\r\n  async delete(id: string) {\r\n    const { data } =  await api.delete(`/question/${id}`);\r\n    return data;\r\n  }\r\n  \r\n  async update(data: { answer: number; course_id: string; id: string; justification: string; options: string[]; proof: string; question: string; simulated: boolean; theme: string[]; topic_id: string; utterance: string; }) {\r\n    return await api.put('/question', data);\r\n  }\r\n\r\n  async save(data: { answer: number; course_id: string; id: string; justification: string; options: string[]; proof: string; question: string; simulated: boolean; theme: string[]; topic_id: string; utterance: string; }) {\r\n    return await api.post('/question', data);\r\n  }\r\n\r\n  async getAllData() : Promise<Array<IQuestion>> {\r\n    const { data } =  await api.get('/question');\r\n    return data;\r\n  } \r\n\r\n}\r\n\r\nexport { QuestionService }","import { ReactNode, createContext } from \"react\";\r\nimport { Toast } from 'primereact/toast';\r\nimport { useEffect, useState, useRef, Dispatch, SetStateAction  } from 'react';\r\n\r\nimport { QuestionService } from '../service/QuestionService';\r\n\r\ntype IQuestion = {\r\n  answer: number;\r\n  course_id: string;\r\n  id: string;\r\n  justification: string;\r\n  options: Array<string>;\r\n  proof: string;\r\n  question: string;\r\n  simulated: boolean\r\n  theme: Array<string>;\r\n  topic_id: string;\r\n  utterance: string\r\n}\r\n\r\ntype QuestionContextType = {\r\n  handleDelete: Function;\r\n  handleSave: Function;\r\n  loading: boolean;\r\n  questionList: Array<IQuestion>\r\n  questionSelected: IQuestion | undefined\r\n  setQuestionSelected : Dispatch<SetStateAction<IQuestion |  undefined>>;\r\n}\r\n\r\ntype QuestionContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const QuestionContext = createContext({} as QuestionContextType);\r\n\r\nexport function QuestionContextProvider(props: QuestionContextProviderProps) {\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const toast = useRef(null);\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [questionList, setQuestionList] = useState(Array<IQuestion>())\r\n  const [questionSelected, setQuestionSelected] = useState<IQuestion>();\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const [loading, setLoading] = useState(false);\r\n  /*\r\n  **Get values from state\r\n  */\r\n  \r\n  /*\r\n  **Local Methods\r\n  */\r\n  const getQuestionList = () => {\r\n    const questionService = new QuestionService();\r\n    questionService.getAllData().then( result => {\r\n      setQuestionList(result);\r\n    });\r\n  }\r\n\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=>{\r\n    getQuestionList();\r\n  }, [])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const handleSave = (data: IQuestion) => {\r\n    setLoading(true);\r\n    const questionService = new QuestionService();\r\n    if(questionSelected && data.proof === questionSelected?.proof){\r\n      data.id = questionSelected.id;\r\n      questionService.update(data).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Questão atualizada com sucesso.',life: 3000});\r\n        getQuestionList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Erro',detail:'Problema ao atualizar a questão.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      questionService.save(data).then(async () => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Questão salvo com sucesso.',life: 3000});\r\n        getQuestionList();\r\n        setLoading(false);                   \r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao salvar a questão.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    setLoading(true);\r\n    const questionService = new QuestionService();\r\n    if( questionSelected ){\r\n      questionService.delete(questionSelected.id).then(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'success', summary: 'Sucesso',detail:'Questão removida com sucesso.',life: 3000});\r\n        getQuestionList();\r\n        setLoading(false);\r\n      }).catch(() => {\r\n        //TODO Improve the way to get error \r\n        // @ts-ignore: Unreachable code error\r\n        toast.current.show({severity:'error', summary: 'Error',detail:'Problema ao remover a questão.',life: 3000});\r\n        setLoading(false);\r\n      });\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <QuestionContext.Provider value={{\r\n      handleDelete,\r\n      handleSave,\r\n      loading,\r\n      questionList,\r\n      questionSelected,\r\n      setQuestionSelected\r\n    }}>\r\n      <Toast ref={toast} position=\"top-right\" />\r\n      {props.children}\r\n    </QuestionContext.Provider>\r\n  );\r\n}","import { api } from './api';\r\n\r\ninterface ITopic {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  couseId?: string;\r\n}\r\n\r\nclass TopicService {\r\n\r\n  async getAllData() : Promise<Array<ITopic>> {\r\n    const { data } =  await api.get('/topic');\r\n    return data;\r\n  }  \r\n}\r\n\r\nexport { TopicService };\r\n","import { Button } from 'primereact/button';\r\nimport { classNames } from 'primereact/utils';\r\nimport { confirmDialog } from 'primereact/confirmdialog';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { InputTextarea } from 'primereact/inputtextarea';\r\nimport {Chips} from 'primereact/chips';\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Checkbox } from 'primereact/checkbox';\r\n\r\nimport { QuestionContext } from '../../context/QuestionContext'\r\nimport { CourseService } from '../../service/CourseService';\r\nimport { TopicService } from '../../service/TopicService';\r\n\r\ninterface ITopic {\r\n  id: string;\r\n  name: string;\r\n  pdf_url: string;\r\n  courseId?: string;\r\n}\r\n\r\ninterface ICourse {\r\n  id: string;\r\n  name: string;\r\n  enabled: boolean;\r\n  topics: Array<ITopic>;\r\n}\r\n\r\ntype IQuestion = {\r\n  answer: number;\r\n  course_id: string;\r\n  id: string;\r\n  justification: string;\r\n  options: Array<string>;\r\n  proof: string;\r\n  question: string;\r\n  simulated: boolean\r\n  theme: Array<string>;\r\n  topic_id: string;\r\n  utterance: string;\r\n  option1?: string;\r\n  option2?: string;\r\n  option3?: string;\r\n  option4?: string;\r\n  option5?: string;\r\n}\r\n\r\nexport function QuestionForm(){\r\n\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { questionSelected, setQuestionSelected, handleSave, handleDelete } = useContext(QuestionContext);\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [ topicList, setTopicList] = useState(Array<ITopic>());\r\n  const [ couseList, setCourseList] = useState(Array<ICourse>());\r\n  const [ filteredTopicList, setFilteredTopicList] = useState(Array<ITopic>()); \r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const defaultValues = {\r\n    answer: '',\r\n    course_id: '',\r\n    justification: '',\r\n    option1: '',\r\n    option2: '',\r\n    option3: '',\r\n    option4: '',\r\n    option5: '',\r\n    proof: '',\r\n    question: '',\r\n    simulated: false,\r\n    theme: Array<string>(),\r\n    topic_id: '',\r\n    utterance: ''\r\n  }\r\n  const { \r\n    control,\r\n    formState: { errors }, \r\n    handleSubmit,\r\n    reset,\r\n    setValue,\r\n    getValues   \r\n  } = useForm({ defaultValues });\r\n  /*\r\n  **Get values from state\r\n  */\r\n  useEffect(()=>{\r\n    if(questionSelected){\r\n      setValue('answer',        questionSelected.answer.toString());\r\n      setValue('justification', questionSelected.justification);\r\n      setValue('option1',       questionSelected.options[0]);\r\n      setValue('option2',       questionSelected.options[1]);\r\n      setValue('option3',       questionSelected.options[2]);\r\n      setValue('option4',       questionSelected.options[3]);\r\n      setValue('option5',       questionSelected.options[4]);\r\n      setValue('proof',         questionSelected.proof);\r\n      setValue('question',      questionSelected.question);\r\n      setValue('simulated',     questionSelected.simulated);\r\n      setValue('theme',         questionSelected.theme);\r\n      setValue('utterance',     questionSelected.utterance);\r\n      setValue('topic_id',      questionSelected.topic_id);\r\n      setValue('course_id',      questionSelected.course_id);\r\n    }\r\n  },[questionSelected]);\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const confirm = () => {\r\n    confirmDialog({\r\n      message: 'Tem certeza que deseja remover?',\r\n      header: 'Confirmação',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      accept: () => handleLocalDelete(),\r\n      reject: () => null\r\n    });\r\n  }\r\n  \r\n  const getFormErrorMessage = (name: string) => {\r\n    if(Object.keys(errors).includes(name)){\r\n      return (\r\n        <small className=\"p-error\">\r\n          { \r\n            /** //TODO Improve the way to get error */\r\n            // @ts-ignore: Unreachable code error\r\n            errors[name].message \r\n          }\r\n        </small>\r\n      );\r\n    }\r\n  };\r\n\r\n  const getCourseList = () => {\r\n    const courseService = new CourseService();\r\n    courseService.getAllData().then( result => {\r\n      setCourseList(result);\r\n    });\r\n  }\r\n\r\n  const getTopicList = () => {\r\n    const topicService = new TopicService();\r\n    topicService.getAllData().then( result => {\r\n      setTopicList(result);\r\n      setFilteredTopicList(result);\r\n    });\r\n  }\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=> {\r\n    getCourseList();\r\n    getTopicList();\r\n  },[]);\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const onSubmit = (data: IQuestion) => {\r\n    const newValue = {...data};\r\n    newValue.options = [];    \r\n    newValue.options.push(data.option1 || '');\r\n    newValue.options.push(data.option2 || '');\r\n    newValue.options.push(data.option3 || '');\r\n    newValue.options.push(data.option4 || '');\r\n    newValue.options.push(data.option5 || '');\r\n\r\n    delete newValue.option1;\r\n    delete newValue.option2;\r\n    delete newValue.option3;\r\n    delete newValue.option4;\r\n    delete newValue.option5;\r\n    newValue.answer = parseInt(newValue.answer.toString(), 10);\r\n    handleSave(newValue);\r\n    setQuestionSelected(undefined);\r\n    reset();\r\n  };\r\n\r\n  const handleLocalDelete = () => {\r\n    handleDelete();\r\n    setQuestionSelected(undefined);\r\n    reset();\r\n  }\r\n\r\n  const handleFilterTopicList = () => {\r\n    if(getValues('course_id')){ \r\n      const course_id = getValues('course_id');\r\n      const newArray = topicList.filter(topic => topic.courseId === course_id);\r\n      setFilteredTopicList(newArray);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"p-fluid\">\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"proof\" className={classNames({ 'p-error': errors.proof })}>Prova*</label>\r\n            <Controller \r\n              name=\"proof\"\r\n              control={control}\r\n              rules={{ required: 'Prova é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText\r\n                  id={field.name}\r\n                  {...field}\r\n                  autoFocus\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('proof')}\r\n          </div>\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"question\" className={classNames({ 'p-error': errors.question })}>Questão*</label>\r\n            <Controller \r\n              name=\"question\"\r\n              control={control}\r\n              rules={{ required: 'Questão é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText\r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('question')}\r\n          </div>\r\n        </div>\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"utterance\" className={classNames({ 'p-error': errors.utterance })}>Enunciado*</label>\r\n            <Controller \r\n              name=\"utterance\"\r\n              control={control}\r\n              rules={{ required: 'Enunciado é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputTextarea \r\n                  id={field.name}\r\n                  {...field}\r\n                  rows={2} cols={30}\r\n                  autoResize\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('utterance')}\r\n          </div>\r\n        </div>  \r\n        <div className=\"p-field p-mb-4\">\r\n          <label className=\"p-field p-mb-4\">Opções*</label>\r\n          <span className=\"p-float-label p-mb-4\">\r\n            <Controller \r\n              name=\"option1\"\r\n              control={control}\r\n              rules={{ required: 'Opção 1 é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText \r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"option1\" className={classNames({ 'p-error': errors.option1 })}>1</label>\r\n            {getFormErrorMessage('option1')}\r\n          </span>\r\n          <span className=\"p-float-label p-mb-4\">\r\n            <Controller \r\n              name=\"option2\"\r\n              control={control}\r\n              rules={{ required: 'Opção 2 é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText \r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('option2')}\r\n            <label htmlFor=\"option2\" className={classNames({ 'p-error': errors.option2 })}>2</label>\r\n          </span>\r\n          <span className=\"p-float-label p-mb-4\">\r\n            <Controller \r\n              name=\"option3\"\r\n              control={control}\r\n              rules={{ required: 'Opção 3 é obrigatório.'}}\r\n              render={({ field, fieldState }) => (\r\n                <InputText \r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"option3\" className={classNames({ 'p-error': errors.option3 })}>3</label>\r\n            {getFormErrorMessage('option3')}\r\n          </span>\r\n          <span className=\"p-float-label p-mb-4\">\r\n            <Controller \r\n              name=\"option4\"\r\n              control={control}\r\n              rules={{ required: 'Opção 4 é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText \r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"option4\" className={classNames({ 'p-error': errors.option4 })}>4</label>\r\n            {getFormErrorMessage('option4')}\r\n          </span>\r\n          <span className=\"p-float-label p-mb-4\">\r\n            <Controller \r\n              name=\"option5\"\r\n              control={control}\r\n              rules={{ required: 'Opção 5 é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputText \r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            <label htmlFor=\"option5\" className={classNames({ 'p-error': errors.option5 })}>5</label>\r\n            {getFormErrorMessage('option5')}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"answer\" className={classNames({ 'p-error': errors.answer })}>Resposta*</label>\r\n            <Controller \r\n              name=\"answer\"\r\n              control={control}\r\n              rules={{ \r\n                required: 'Resposta é obrigatório.',\r\n                pattern: { \r\n                  value: /^[1-5]{1}$/i,\r\n                  message: 'Valor deve estar entre 1 e 5.'\r\n                }\r\n              }}\r\n              render={({ field, fieldState }) => ( \r\n                <InputText\r\n                  id={field.name}\r\n                  {...field}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('answer')}\r\n          </div>\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"theme\" className={classNames({ 'p-error': errors.theme })}>Tema*</label>\r\n            <Controller \r\n              name=\"theme\"\r\n              control={control}\r\n              rules={{ required: 'Tema é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <Chips\r\n                  id={field.name}\r\n                  onChange={(e) => field.onChange(e.target.value)}\r\n                  value={field.value}\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                  separator=\",\"\r\n                />\r\n              )} \r\n            />\r\n            {getFormErrorMessage('theme')}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"justification\" className={classNames({ 'p-error': errors.justification })}>Justificativa*</label>\r\n            <Controller \r\n              name=\"justification\"\r\n              control={control}\r\n              rules={{ required: 'Justificativa é obrigatório.' }}\r\n              render={({ field, fieldState }) => (\r\n                <InputTextarea \r\n                  id={field.name}\r\n                  {...field}\r\n                  rows={2} cols={30}\r\n                  autoResize\r\n                  className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                />\r\n              )} \r\n            />\r\n           {getFormErrorMessage('justification')}\r\n          </div>\r\n        </div>\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <div className=\"p-field-checkbox\">\r\n              <Controller\r\n                name=\"simulated\"\r\n                control={control}\r\n                render={({ field, fieldState }) => (\r\n                  <Checkbox\r\n                    inputId={field.name}\r\n                    onChange={(e) => field.onChange(e.checked)}\r\n                    checked={field.value}\r\n                    className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                  />\r\n                )} \r\n              />\r\n              <label htmlFor=\"simulated\" className={classNames({ 'p-error': errors.simulated })}>Simulado*</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"p-fluid p-formgrid p-grid\">\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"course_id\">Curso</label>\r\n            <Controller \r\n                name=\"course_id\"\r\n                control={control}\r\n                render={({ field }) => \r\n              (   \r\n                <Dropdown \r\n                  id={field.name}\r\n                  value={field.value}\r\n                  onChange={(e) => field.onChange(e.value)}\r\n                  options={couseList}\r\n                  optionLabel=\"name\"\r\n                  optionValue=\"id\" \r\n                  name=\"course_id\"\r\n                  onBlur={handleFilterTopicList}\r\n                />\r\n            )} />\r\n          </div>\r\n          <div className=\"p-field p-col\">\r\n            <label htmlFor=\"course_id\">Tópico</label>\r\n            <Controller \r\n              name=\"topic_id\"\r\n              control={control}\r\n              render={({ field }) => \r\n            (   \r\n              <Dropdown \r\n                id={field.name}\r\n                value={field.value}\r\n                onChange={(e) => field.onChange(e.value)}\r\n                options={filteredTopicList}\r\n                optionLabel=\"name\"\r\n                optionValue=\"id\" \r\n                name=\"topic_id\"\r\n              />\r\n            )} />\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <div className=\"p-fluid p-formgrid p-grid\">\r\n        <div className=\"p-field p-col\">\r\n          <Button \r\n            type=\"submit\"\r\n            label=\"Salvar\"\r\n            icon=\"pi pi-check-circle\"\r\n            className=\"p-button-rounded p-mr-2 p-mb-2\" \r\n          />\r\n        </div>\r\n        <div className=\"p-field p-col\">\r\n          <Button \r\n            label=\"Limpar\" \r\n            className=\"p-button-rounded p-mr-2 p-mb-2\"\r\n            icon=\"pi pi-times-circle\"\r\n            onClick={\r\n              () => {reset(); setQuestionSelected(undefined);}\r\n            } \r\n          />\r\n        </div>\r\n        <div className=\"p-field p-col\">\r\n          <Button\r\n            label=\"Remover\"\r\n            onClick={() => confirm()}\r\n            icon=\"pi pi-trash\"\r\n            className=\"p-button-rounded p-button-danger p-mb-2\" \r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}","import { Button } from 'primereact/button';\r\nimport { Column } from 'primereact/column';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { useContext } from 'react';\r\n\r\nimport { QuestionContext } from '../../context/QuestionContext'\r\n\r\ntype IQuestion = {\r\n  answer: number;\r\n  course_id: string;\r\n  id: string;\r\n  justification: string;\r\n  options: Array<string>;\r\n  proof: string;\r\n  question: string;\r\n  simulated: boolean\r\n  theme: Array<string>;\r\n  topic_id: string;\r\n  utterance: string\r\n}\r\n\r\nexport function QuestionList(){\r\n\r\n  /*\r\n  **Framework Variables\r\n  */\r\n const { questionSelected, setQuestionSelected, questionList } = useContext(QuestionContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const paginatorLeft = <Button type=\"button\" icon=\"pi pi-refresh\" className=\"p-button-text\" />;\r\n  const paginatorRight = <Button type=\"button\" icon=\"pi pi-cloud\" className=\"p-button-text\" />;\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  const simulatedBodyTemplate = (rowData: IQuestion) => {\r\n    if(rowData.simulated){\r\n      return \"Sim\";\r\n    }\r\n    return \"Não\";\r\n  }\r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  return (<DataTable\r\n    currentPageReportTemplate=\"Exibindo {first} de {last} até {totalRecords}\" \r\n    dataKey=\"id\"\r\n    emptyMessage=\"Não foram encontradas questões\"\r\n    onSelectionChange={e => setQuestionSelected(e.value)}\r\n    paginator\r\n    paginatorLeft={paginatorLeft}\r\n    paginatorRight={paginatorRight}\r\n    paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n    rows={10} \r\n    rowsPerPageOptions={[10,20,30]}\r\n    selection={questionSelected}\r\n    selectionMode=\"radiobutton\"\r\n    value={questionList}\r\n  >\r\n      <Column selectionMode=\"single\" headerStyle={{width: '3em'}}></Column>\r\n      <Column field=\"proof\" header=\"Prova\"></Column>\r\n      <Column field=\"theme\" header=\"Tema\"></Column>\r\n      <Column field=\"question\" header=\"Questão\"></Column>\r\n      <Column header=\"Simulado\" body={simulatedBodyTemplate}></Column>\r\n  </DataTable>);\r\n}","import { Divider } from 'primereact/divider';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\nimport { useContext } from 'react'\r\n\r\nimport { QuestionContext, QuestionContextProvider } from '../../context/QuestionContext'\r\nimport { QuestionForm } from './QuestionForm';\r\nimport { QuestionList } from './QuestionList';\r\n\r\nexport function Question(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const { loading } = useContext(QuestionContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  \r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  \r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n\r\n  return (\r\n    <QuestionContextProvider>\r\n      <div className=\"spinnerContainer\">\r\n          {\r\n              loading ? (<ProgressSpinner \r\n                  style={{width: '30px', height: '30px'}}\r\n                  strokeWidth=\"8\"\r\n                  animationDuration=\"1s\"\r\n              />) : (<></>)\r\n          }\r\n      </div>\r\n      <Divider align=\"center\">\r\n        <span className=\"my-page-header\">Formulário da Questäo</span> \r\n      </Divider>\r\n      <QuestionForm/>\r\n      <Divider align=\"center\" >\r\n        <span className=\"my-page-header\">Lista de Questäo</span> \r\n      </Divider>\r\n      <QuestionList/>\r\n    </QuestionContextProvider>\r\n  );\r\n}","function Home(){\r\n  return(<>\r\n    Minha Home\r\n  </>)\r\n}\r\n\r\nexport { Home }","import { Template } from '../components/Template';\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport { User } from '../pages/User/User';\r\nimport { Course } from '../pages/Course/Course';\r\nimport { Question } from '../pages/Question/Question';\r\nimport { Home } from '../pages/Home/Home';\r\n\r\nfunction Internal() {\r\n\r\n  return(\r\n    <Template>\r\n      <Switch>\r\n        <Route exact path=\"/app\" component={Home} />\r\n        <Route exact path=\"/app/user\" component={User} />\r\n        <Route exact path=\"/app/course\" component={Course} />\r\n        <Route exact path=\"/app/question\" component={Question} />\r\n        <Route path=\"/app/*\" component={Home} />\r\n      </Switch>\r\n    </Template>\r\n  );\r\n}\r\n\r\nexport { Internal }","export default __webpack_public_path__ + \"static/media/logo_med_one.6d99e50b.png\";","import { Button } from 'primereact/button';\r\nimport { classNames } from 'primereact/utils';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { firebase } from '../service/firebase';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useState, useContext, useEffect } from 'react';\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport logoImg from '../assets/logo_med_one.png';\r\n\r\nimport '../style/auth.scss';\r\n\r\ntype IAccess = {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nfunction Login(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  const history = useHistory();\r\n  const { handleLogin, toast, user} = useContext(AuthContext);\r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  const [emailChangePass, setEmailChangePass] = useState('');\r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n  const [position, setPosition] = useState('center');\r\n  const [displayResponsive, setDisplayResponsive] = useState(false);\r\n\r\n  const defaultValues = {\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  const dialogFuncMap = {\r\n    'displayResponsive': setDisplayResponsive\r\n  }\r\n\r\n  const { \r\n    control,\r\n    formState: { errors }, \r\n    handleSubmit,\r\n  } = useForm({ defaultValues });\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n  \r\n  /*\r\n  **Local Methods\r\n  */\r\n  const onClick = () => {\r\n    dialogFuncMap['displayResponsive'](true);\r\n\r\n    if (position) {\r\n        setPosition(position);\r\n    }\r\n  }\r\n\r\n  const onHide = () => {\r\n    dialogFuncMap['displayResponsive'](false);\r\n    setEmailChangePass('');\r\n  }\r\n\r\n  const getFormErrorMessage = (name: string) => {\r\n    if(Object.keys(errors).includes(name)){\r\n      return (\r\n        <small className=\"p-error\">\r\n          { \r\n            /** //TODO Improve the way to get error */\r\n            // @ts-ignore: Unreachable code error\r\n            errors[name].message \r\n          }\r\n        </small>\r\n      );\r\n    }\r\n  };\r\n\r\n  /*\r\n  **React Methods\r\n  */\r\n  useEffect(()=>{\r\n    if(user){\r\n      history.push('/app');\r\n    }\r\n  },[user])\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  const onSubmit = (data: IAccess) => {\r\n    handleLogin(data);\r\n  }\r\n\r\n  const sendEmailWithPassChange = () => {\r\n    firebase.auth().sendPasswordResetEmail(emailChangePass)\r\n    .then(() => {\r\n      //TODO Improve the way to get error \r\n      // @ts-ignore: Unreachable code error\r\n      toast.current.show({severity:'success', summary: 'Sucesso',detail:'Email com as informações de alteração de senha, foi enviado com sucesso.',life: 3000});\r\n      onHide();\r\n    })\r\n    .catch((error) => {\r\n      //TODO Improve the way to get error \r\n      // @ts-ignore: Unreachable code error\r\n      toast.current.show({severity:'error', summary: 'Erro',detail:'Não foi possível enviar a alteração de senha.',life: 3000});\r\n    });\r\n  }\r\n\r\n  const renderFooter = () => {\r\n    return (\r\n      <div>\r\n        <Button label=\"Não\" icon=\"pi pi-times\" onClick={() => onHide()} className=\"p-button-text\" />\r\n        <Button label=\"Sim\" icon=\"pi pi-check\" onClick={() => sendEmailWithPassChange()} autoFocus />\r\n      </div>\r\n    );\r\n}\r\n\r\n  return(\r\n    <div id=\"page-auth\">\r\n      <aside>\r\n        <strong>Curso Med One</strong>\r\n        <p><span className=\"my-destak\">O</span>bjetivo ú<span className=\"my-destak\">N</span>ico <span className=\"my-destak\">É</span> Aprovar.</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImg} alt=\"Med One\" />\r\n          <form onSubmit={handleSubmit(onSubmit)} className=\"p-fluid my-form\">\r\n            <div className=\"p-fluid p-formgrid p-grid my-space-btw\">\r\n              <label htmlFor=\"email\" className={classNames({ 'p-error': !!errors.email })}>Email*</label>\r\n              <Controller \r\n                name=\"email\"\r\n                control={control}\r\n                rules={\r\n                  { \r\n                    required: 'Email é obrigatório.', \r\n                    pattern: { \r\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                        message: 'Endereço de email inválido.  E.x. examplo@email.com'\r\n                    }\r\n                  }\r\n                }\r\n                render={({ field, fieldState }) => (\r\n                  <InputText \r\n                    id={field.name}\r\n                    {...field} \r\n                    className={classNames({ 'p-invalid': fieldState.invalid })}\r\n                  />\r\n              )} />\r\n              {getFormErrorMessage('email')}\r\n            </div>\r\n            <div className=\"p-fluid p-formgrid p-grid p-mb-2\">\r\n              <label htmlFor=\"password\" className={classNames({ 'p-error': errors.password })}>Senha*</label>\r\n              <Controller \r\n                name=\"password\"\r\n                control={control}\r\n                rules={{ required: 'Senha é obrigatório.' }}\r\n                render={({ field, fieldState }) => (\r\n                  <Password \r\n                    id={field.name} \r\n                    {...field} \r\n                    toggleMask\r\n                    feedback={false}\r\n                    className={classNames({ 'p-invalid': fieldState.invalid })} \r\n                  />\r\n              )} />\r\n              {getFormErrorMessage('password')}\r\n            </div>\r\n            <div className=\"my-btn\">\r\n              <Button \r\n                type=\"submit\"\r\n                label=\"Entrar\"\r\n                icon=\"pi pi-check-circle\"\r\n                className=\"p-button-rounded p-mr-2 p-mb-2\" \r\n              />\r\n            </div>\r\n          </form>\r\n          <Button\r\n            className=\"p-button-rounded p-button-warning my-btn-reset-pass\"\r\n            label=\"Esqueceu a senha?\"\r\n            icon=\"pi pi-external-link\"\r\n            onClick={() => onClick()}\r\n          />\r\n          <div className=\"digital-ocean-logo\">\r\n            <a href=\"https://www.digitalocean.com/?refcode=3df8caaf928c&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge\">\r\n              <img src=\"https://web-platforms.sfo2.digitaloceanspaces.com/WWW/Badge%202.svg\" alt=\"DigitalOcean Referral Badge\" />\r\n            </a>\r\n          </div>\r\n          <Dialog \r\n              header=\"Esqueceu a senha?\" \r\n              visible={displayResponsive}\r\n              onHide={() => onHide()}\r\n              breakpoints={{'960px': '75vw'}} \r\n              style={{width: '50vw'}} \r\n              footer={renderFooter()}>\r\n              <p>Informe seu e-mail cadastrado para que se possa lhe enviar a instrução de alteração de senha:</p><br />\r\n              <div className=\"p-fluid p-formgrid p-grid\">\r\n                <span className=\"p-input-icon-left\">\r\n                  <i className=\"pi pi-envelope\" />\r\n                  <InputText value={emailChangePass} onChange={(event)=> setEmailChangePass(event.target.value)} placeholder=\"e-mail\" />\r\n                </span>\r\n              </div>\r\n          </Dialog>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Login }","import logoImg from '../assets/logo_med_one.png';\r\n\r\nimport '../style/auth.scss';\r\n\r\nfunction NotFound(){\r\n  /*\r\n  **Framework Variables\r\n  */\r\n  \r\n\r\n  /*\r\n  **Model Variables\r\n  */\r\n  \r\n\r\n  /*\r\n  **Local Variables\r\n  */\r\n\r\n  /*\r\n  **Get values from state\r\n  */\r\n\r\n  /*\r\n  **Local Methods\r\n  */\r\n  \r\n  /*\r\n  **React Methods\r\n  */\r\n\r\n  /*\r\n  **Event Handler\r\n  */\r\n  \r\n  return(\r\n    <div id=\"page-auth\">\r\n      <aside>\r\n        <strong>Curso Med One</strong>\r\n        <p><span className=\"my-destak\">O</span>bjetivo ú<span className=\"my-destak\">N</span>ico <span className=\"my-destak\">É</span> Aprovar.</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImg} alt=\"Med One\" />\r\n          <span className=\"my-notfound-code\"> 4<span className=\"my-notfound-code-0\">0</span>4 </span>\r\n          <span className=\"my-notfound-msg\"> Página não encontrada!</span>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { NotFound }","import { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\r\nimport { useContext } from 'react'\r\n\r\nimport 'primereact/resources/themes/rhea/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primeflex/primeflex.css';\r\n\r\nimport \"./service/firebase\";\r\n\r\nimport { Internal } from './pages/Internal';\r\nimport { Login } from './pages/Login';\r\nimport { NotFound } from './pages/NotFound';\r\nimport { AuthContextProvider, AuthContext } from './context/AuthContext';\r\n\r\n\r\nconst PrivateRoute = (props: any) => {\r\n  const { component: Component, ...rest } = props;\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(matchProps) =>\r\n        user ? <Component {...matchProps} /> : <Redirect to=\"/login\" />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return(<>\r\n    <AuthContextProvider>\r\n      <BrowserRouter>\r\n        <Switch>      \r\n            <Route exact path=\"/login\" component={Login} />        \r\n            <PrivateRoute path=\"/app\" component={Internal} />\r\n            <Redirect exact from=\"/\" to=\"/login\" />\r\n            <Route path=\"*\" component={NotFound} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </AuthContextProvider>\r\n    \r\n  </>);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport './style/global.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}